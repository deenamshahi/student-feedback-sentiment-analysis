name: Test Sentiment Model

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('ai-model/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai-model/requirements.txt
        pip install pytest pytest-cov flake8 black

    - name: Ensure __init__.py exists
      run: echo "# Package marker" > ai-model/src/__init__.py

    - name: Auto-format code with Black
      run: |
        black ai-model/src/ ai-model/tests/ --exclude ai-model/src/__init__.py

    - name: Code formatting check
      run: |
        black --check ai-model/src/ ai-model/tests/
        flake8 ai-model/src/ ai-model/tests/ --max-line-length=88

    - name: Data validation
      run: |
        python -c "
        import pandas as pd
        df = pd.read_csv('ai-model/data/filtered_dataset_expanded.csv')
        df.columns = df.columns.str.strip()
        required_cols = ['Text', 'Sentiment']
        for col in required_cols:
            assert col in df.columns, f'Missing column: {col}'
        print(f'Dataset OK: {len(df)} rows')
        print(df.Sentiment.value_counts())
        "

    - name: Model logic test
      run: |
        python -c "
        from ai-model.src.model_training import clean_text
        from ai-model.src.data_preprocessing import load_data
        data = load_data('ai-model/data/filtered_dataset_expanded.csv')
        cleaned = clean_text('Great product!!! #exciting')
        print(f'Cleaned: {cleaned}')
        "

    - name: Prediction tests
      run: |
        PYTHONPATH=ai-model pytest ai-model/tests/ -v --cov=ai-model/src/ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        pip install safety bandit

    - name: Check dependencies
      run: safety check -r ai-model/requirements.txt

    - name: Bandit scan
      run: bandit -r ai-model/src/ -f json -o bandit-report.json || true
